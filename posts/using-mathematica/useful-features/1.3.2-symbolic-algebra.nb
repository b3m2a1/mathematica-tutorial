(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     85005,       2090]
NotebookOptionsPosition[     76025,       1947]
NotebookOutlinePosition[     76458,       1964]
CellTagsIndexPosition[     76415,       1961]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"\"\<Title\>\"", "\[Rule]", "\"\<Symbolic Algebra\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"\"\<Slug\>\"", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
   "\"\<Path\>\"", "\[Rule]", "\"\<Using Mathematica/Useful Features\>\""}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<ID\>\"", "\[Rule]", "\"\<1.3.2\>\""}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"\"\<Date\>\"", "\[Rule]", "Now"}], ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<Modified\>\"", "\[Rule]", "Now"}], ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<Authors\>\"", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<Categories\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<using-mathematica\>\"", ",", "\"\<useful-features\>\""}], 
     "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<Tags\>\"", "\[Rule]", 
    RowBox[{"{", "\"\<symbolic algebra\>\"", "}"}]}]}], "\[IndentingNewLine]",
   "\[RightAssociation]"}]], "Metadata",
 CellChangeTimes->{{3.7230674328716917`*^9, 3.723067452190956*^9}, {
   3.7230679580568*^9, 3.7230680128473673`*^9}, {3.7232007087815647`*^9, 
   3.7232007883818817`*^9}, 3.723201146733818*^9, {3.723203002317672*^9, 
   3.723203008852455*^9}, {3.723203499603772*^9, 3.7232035545127563`*^9}, {
   3.723203862030583*^9, 3.723203882695241*^9}, {3.723204068783868*^9, 
   3.72320408189968*^9}, {3.723251376316903*^9, 3.723251382266656*^9}, {
   3.7233476763812838`*^9, 3.723347697986979*^9}, {3.7233478130425367`*^9, 
   3.723347844219796*^9}, {3.723347901517427*^9, 3.723347920009951*^9}, {
   3.723347997057991*^9, 
   3.723348016991189*^9}},ExpressionUUID->"193e9afe-58b0-4309-9e29-\
8bb496c1c725"],

Cell[CellGroupData[{

Cell["Symbolic Algebra", "Subsection",
 CellChangeTimes->{{3.686354630627787*^9, 3.686354633888693*^9}, {
  3.723595622319542*^9, 
  3.723595622645554*^9}},ExpressionUUID->"a1bec3fe-0332-4956-b0fb-\
2975ccd560a8"],

Cell["\<\
As is explained more fully in the Mathematica Programming section, the \
language Mathematica is built around is almost 100% symbolic, which makes it \
perfect for algebraic manipulations.\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686355073982009*^9, 
   3.686355155285342*^9}},ExpressionUUID->"4b1d3c23-3612-4d45-9c46-\
4d17a0cf9493"],

Cell["\<\
One of the simplest examples of things one can do in Mathematica is generate \
and combine polynomials:\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686355165868107*^9, 3.686355196389103*^9}, {
   3.686355529037857*^9, 
   3.6863555375324163`*^9}},ExpressionUUID->"2597c862-01c4-42dc-b39a-\
1078248423d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"simplePolynomial", "[", 
    RowBox[{"var_", ",", "order_"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Total", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"RandomInteger", "[", "10", "]"}], "*", 
       RowBox[{"Power", "[", 
        RowBox[{"var", ",", "n"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "order"}], "}"}]}], "]"}]}]}], ";"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686355218686298*^9, 3.686355228732127*^9}, {
   3.686355395556261*^9, 3.6863554852622547`*^9}, 
   3.723348024537252*^9},ExpressionUUID->"1885f133-1a8b-450d-ab7d-\
531fa6b01e16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pX1", "=", 
  RowBox[{"simplePolynomial", "[", 
   RowBox[{"x", ",", "2"}], "]"}]}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686355463021604*^9, 
   3.686355493517477*^9}},ExpressionUUID->"3ee95bff-40a5-47ec-9658-\
2f3765ff20cc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"4", " ", "x"}], "+", 
  RowBox[{"6", " ", 
   SuperscriptBox["x", "2"]}]}]], "Output",
 CellChangeTimes->{
  3.686355494281068*^9},ExpressionUUID->"8c57d4f8-f618-4b8e-961c-\
020dd0aead4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pX2", "=", 
  RowBox[{"simplePolynomial", "[", 
   RowBox[{"x", ",", "2"}], "]"}]}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863554965458117`*^9, 
   3.6863555040956717`*^9}},ExpressionUUID->"ecbed9bb-be3c-4808-aae2-\
08fc40f774e7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"10", " ", "x"}], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["x", "2"]}]}]], "Output",
 CellChangeTimes->{
  3.686355505820221*^9},ExpressionUUID->"ee46b3bd-5f62-4302-95f6-\
ac8ad43b8aef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"pX1", "+", "pX2"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.6863551987346582`*^9, 3.686355208660935*^9}, {
  3.686355508286708*^9, 
  3.686355514159645*^9}},ExpressionUUID->"3742a04b-4bd2-41f1-bfe6-\
da1f4aff96fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"14", " ", "x"}], "+", 
  RowBox[{"16", " ", 
   SuperscriptBox["x", "2"]}]}]], "Output",
 CellChangeTimes->{
  3.68635551455523*^9},ExpressionUUID->"22468b83-632f-4d59-9fe0-fb692f44cfcd"]
}, Open  ]],

Cell[TextData[{
 "This works just as well at any polynomial order. Here \
we\[CloseCurlyQuote]ll add five randomly generated polynomials of order less \
than or equal to ",
 Cell[BoxData["15"], "InlineInput", "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "8ecbf17e-1dc2-4f24-a6d7-ebdecdadf296"],
 "."
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686355555820904*^9, 3.686355570673357*^9}, {
   3.686355616931346*^9, 3.686355646057757*^9}, {3.723348027337462*^9, 
   3.72334802992728*^9}},ExpressionUUID->"0a1cc0b0-56ac-404b-a5ad-\
32a52e65e66c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Array", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"simplePolynomial", "[", 
       RowBox[{"x", ",", 
        RowBox[{"RandomInteger", "[", "15", "]"}]}], "]"}], ")"}], "&"}], ",",
     "5"}], "]"}], "//", "Total"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.6863555747732143`*^9, 
  3.6863556111145906`*^9}},ExpressionUUID->"c51ffad9-2173-4f70-a439-\
d0bf051dbaef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"22", " ", "x"}], "+", 
  RowBox[{"26", " ", 
   SuperscriptBox["x", "2"]}], "+", 
  RowBox[{"15", " ", 
   SuperscriptBox["x", "3"]}], "+", 
  RowBox[{"28", " ", 
   SuperscriptBox["x", "4"]}], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["x", "5"]}], "+", 
  RowBox[{"9", " ", 
   SuperscriptBox["x", "6"]}], "+", 
  RowBox[{"12", " ", 
   SuperscriptBox["x", "7"]}], "+", 
  RowBox[{"13", " ", 
   SuperscriptBox["x", "8"]}], "+", 
  RowBox[{"19", " ", 
   SuperscriptBox["x", "9"]}], "+", 
  RowBox[{"11", " ", 
   SuperscriptBox["x", "10"]}], "+", 
  RowBox[{"9", " ", 
   SuperscriptBox["x", "11"]}], "+", 
  RowBox[{"13", " ", 
   SuperscriptBox["x", "12"]}], "+", 
  RowBox[{"6", " ", 
   SuperscriptBox["x", "13"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "14"]}]}]], "Output",
 CellChangeTimes->{
  3.686355611449625*^9},ExpressionUUID->"7fc42fc4-22db-4e5f-9ccb-\
72c14ea72f0d"]
}, Open  ]],

Cell["\<\
For those interested, the & specifies that what comes before should be \
treated as a function, but absent any variables we simply get our expression \
as a result.\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863557902621527`*^9, 
   3.6863558394129353`*^9}},ExpressionUUID->"84fe5280-7b6a-4455-b485-\
69af083d8b4a"],

Cell[CellGroupData[{

Cell["Simplify", "Subsubsection",ExpressionUUID->"42f8a30d-3914-4d34-83fb-9e374e14a3fd"],

Cell["\<\
For more complex things we\[CloseCurlyQuote]ll need to explicitly simplify \
them:\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863556745189257`*^9, 
   3.686355691728894*^9}},ExpressionUUID->"36087a34-6f48-48a0-a91a-\
df924496b742"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sphericalHarmonicSum", "=", 
  RowBox[{"Total", "@", 
   RowBox[{"Array", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"SphericalHarmonicY", "[", 
       RowBox[{
        RowBox[{"RandomInteger", "[", "5", "]"}], ",", 
        RowBox[{"RandomInteger", "[", "5", "]"}], ",", "\[Theta]", ",", 
        "\[Phi]"}], "]"}], "&"}], ",", "\[IndentingNewLine]", "5"}], 
    "]"}]}]}]], "Code",
 CellChangeTimes->{{3.686355694377722*^9, 3.686355785630672*^9}, 
   3.686355855607699*^9},ExpressionUUID->"60ac1dec-af0d-42fc-9da6-\
1abc815d8a7e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "2"]}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
   SqrtBox[
    FractionBox["3", 
     RowBox[{"2", " ", "\[Pi]"}]]], " ", 
   RowBox[{"Sin", "[", "\[Theta]", "]"}]}], "+", 
  RowBox[{
   FractionBox["1", "4"], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
   SqrtBox[
    FractionBox["105", 
     RowBox[{"2", " ", "\[Pi]"}]]], " ", 
   RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}], "+", 
  RowBox[{
   FractionBox["1", "8"], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
   SqrtBox[
    FractionBox["1155", 
     RowBox[{"2", " ", "\[Pi]"}]]], " ", 
   RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox[
       RowBox[{"Cos", "[", "\[Theta]", "]"}], "2"]}]}], ")"}], " ", 
   SuperscriptBox[
    RowBox[{"Sin", "[", "\[Theta]", "]"}], "2"]}]}]], "Output",
 CellChangeTimes->{
  3.686355766811116*^9, {3.686355848387329*^9, 3.686355858802939*^9}, {
   3.686357144436038*^9, 
   3.686357148470479*^9}},ExpressionUUID->"b93965c3-1cfb-4f7d-bf2a-\
6f4f9171041e"]
}, Open  ]],

Cell["\<\
We can then have Mathematica simplify this expression for us more:\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686355880235282*^9, 
   3.6863558957704563`*^9}},ExpressionUUID->"13ff32a5-508d-4dfa-8314-\
a50d85b07e62"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", "sphericalHarmonicSum", "]"}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863558643469677`*^9, 
   3.686355870504364*^9}},ExpressionUUID->"3289257b-881c-430a-bd53-\
208abf1282c0"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "64"], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
  SqrtBox[
   FractionBox["3", 
    RowBox[{"2", " ", "\[Pi]"}]]], " ", 
  RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "32"}], "+", 
    RowBox[{"2", " ", 
     SqrtBox["35"], " ", 
     RowBox[{"(", 
      RowBox[{"4", "+", 
       SqrtBox["11"]}], ")"}], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"2", " ", "\[Theta]"}], "]"}]}], "+", 
    RowBox[{"3", " ", 
     SqrtBox["385"], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"4", " ", "\[Theta]"}], "]"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.68635587109951*^9, 
  3.6863571530097237`*^9},ExpressionUUID->"657a36d2-924d-43de-b6df-\
a84067c23a40"]
}, Open  ]],

Cell[TextData[{
 "Sometimes we also need to use the function ",
 Cell[BoxData[
  FormBox["FullSimplify", TextInlineCell]], "InlineInput",ExpressionUUID->
  "7ec29ef8-ca5a-4f77-a8f8-ea20e3b42057"],
 " to get everything simplified:"
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863571325979548`*^9, 
   3.686357173024004*^9}},ExpressionUUID->"0855859a-c843-400f-9d6c-\
bce417123550"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", "sphericalHarmonicSum", "]"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686357175601494*^9, 
  3.686357182343823*^9}},ExpressionUUID->"739aa42f-1d78-434d-a91c-\
2f7b4c05c473"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "32"], " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
  SqrtBox[
   FractionBox["3", 
    RowBox[{"2", " ", "\[Pi]"}]]], " ", 
  RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "16"}], "+", 
    RowBox[{
     SqrtBox["35"], " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"\[ImaginaryI]", " ", "\[Phi]"}]], " ", 
     RowBox[{"(", 
      RowBox[{"4", "+", 
       SqrtBox["11"], "+", 
       RowBox[{"3", " ", 
        SqrtBox["11"], " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", " ", "\[Theta]"}], "]"}]}]}], ")"}], " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"2", " ", "\[Theta]"}], "]"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.68635718455271*^9},ExpressionUUID->"50c5c1a7-e580-45a3-8789-10d591172f28"]
}, Open  ]],

Cell[TextData[{
 "It often makes sense to go for ",
 Cell[BoxData[
  FormBox["Simplify", TextInlineCell]], "InlineInput",ExpressionUUID->
  "007ef802-5d9e-4dde-b829-e157ed2eeb62"],
 " over ",
 Cell[BoxData[
  FormBox["FullSimplify", TextInlineCell]], "InlineInput",ExpressionUUID->
  "12bfa615-e7be-416b-ae69-a98fdcfd3a2d"],
 ", despite the fact that we can get more simplification out of ",
 Cell[BoxData[
  FormBox["FullSimplify", TextInlineCell]], "InlineInput",ExpressionUUID->
  "cc706efb-0064-4200-a383-f888d0f2faf0"],
 ", because sometimes the ",
 Cell[BoxData[
  FormBox["Simplify", TextInlineCell]], "InlineInput",ExpressionUUID->
  "a72ebb8e-5a25-4cbe-8428-bfc920be4199"],
 " is all we need to see a pattern ourselves, while ",
 Cell[BoxData[
  FormBox["FullSimplify", TextInlineCell]], "InlineInput",ExpressionUUID->
  "cd9ba5bd-655e-45e1-b3a2-b6214f999cf1"],
 " can over-simplify and obliterate that pattern. "
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863571947139482`*^9, 3.686357302662026*^9}, {
   3.686357399839484*^9, 
   3.686357424096098*^9}},ExpressionUUID->"8a3147a3-f0c2-4f4c-9da2-\
d6a2460aa10c"],

Cell["\<\
It\[CloseCurlyQuote]s good to keep in mind that while Mathematica may know \
more than we do, we're still smarter than it is.\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863571947139482`*^9, 3.686357302662026*^9}, {
   3.686357399839484*^9, 
   3.686357436530283*^9}},ExpressionUUID->"fc39ea4d-f777-4f97-b300-\
95da058da38b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solve", "Subsubsection",ExpressionUUID->"0552c4aa-b454-47af-97bb-9e0610336e67"],

Cell["\<\
Mathematica can also solve equations for us. We\[CloseCurlyQuote]ll try this \
on a nice quartic polynomial:\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863575108287277`*^9, 3.686357527784678*^9}, {
   3.686357682845541*^9, 3.68635769928538*^9}, {3.6863577333252573`*^9, 
   3.68635773646126*^9}},ExpressionUUID->"08352046-2a64-4b29-b4b0-\
abc3a28e7a99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polynomialInX", "=", 
  RowBox[{"simplePolynomial", "[", 
   RowBox[{"x", ",", " ", "4"}], "]"}]}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686357621519835*^9, 3.6863576342372026`*^9}, 
   3.686357671470862*^9, 
   3.686357724868991*^9},ExpressionUUID->"acb9707d-3d87-4166-a2fa-\
810b0ec609cd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"6", " ", "x"}], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["x", "2"]}], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox["x", "3"]}], "+", 
  RowBox[{"6", " ", 
   SuperscriptBox["x", "4"]}]}]], "Output",
 CellChangeTimes->{3.686357634731545*^9, 3.6863576716967688`*^9, 
  3.686357725134804*^9},ExpressionUUID->"f6b002ac-4b1b-40d6-88cc-\
f2d5280c0b49"]
}, Open  ]],

Cell["\<\
Note that there\[CloseCurlyQuote]s no nice way to find the roots of this \
polynomial by hand. But Mathematica doesn\[CloseCurlyQuote]t mind:\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686357701012347*^9, 3.686357717484741*^9}, {
   3.686357803523097*^9, 
   3.686357830290227*^9}},ExpressionUUID->"4dafe9cc-1807-406c-a0e9-\
4e8926f6aaaf"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"polynomialInX", "\[Equal]", "0"}], ",", "x"}], "]"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686357528698814*^9, 3.686357556305027*^9}, {
  3.686357613817256*^9, 
  3.6863576196777554`*^9}},ExpressionUUID->"11e75e5e-34c8-4dee-a889-\
5eb5ac340610"],

Cell[BoxData[
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      FractionBox["1", "6"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        FractionBox["9", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "94"}], "+", 
            SqrtBox["9565"]}], ")"}], 
          RowBox[{"1", "/", "3"}]]], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "94"}], "+", 
           SqrtBox["9565"]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "6"]}], "+", 
      FractionBox[
       RowBox[{"3", " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}]}], 
       RowBox[{"4", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "94"}], "+", 
           SqrtBox["9565"]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}]], "-", 
      RowBox[{
       FractionBox["1", "12"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"\[ImaginaryI]", " ", 
          SqrtBox["3"]}]}], ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "94"}], "+", 
          SqrtBox["9565"]}], ")"}], 
        RowBox[{"1", "/", "3"}]]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "6"]}], "+", 
      FractionBox[
       RowBox[{"3", " ", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"\[ImaginaryI]", " ", 
           SqrtBox["3"]}]}], ")"}]}], 
       RowBox[{"4", " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "94"}], "+", 
           SqrtBox["9565"]}], ")"}], 
         RowBox[{"1", "/", "3"}]]}]], "-", 
      RowBox[{
       FractionBox["1", "12"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"\[ImaginaryI]", " ", 
          SqrtBox["3"]}]}], ")"}], " ", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "94"}], "+", 
          SqrtBox["9565"]}], ")"}], 
        RowBox[{"1", "/", "3"}]]}]}]}], "}"}]}], " ", "}"}]], "Code",
 CellChangeTimes->{{3.72359642058538*^9, 
  3.723596428652855*^9}},ExpressionUUID->"92ed04ef-0b47-4306-ac4e-\
31deec6c9bc3"],

Cell[TextData[{
 "As mentioned before, Mathematica knows more math than any of us. It sees a \
quartic polynomial and knows that by the ",
 ButtonBox["fundamental theorem of algebra",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Fundamental_theorem_of_algebra"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Fundamental_theorem_of_algebra"],
 " there are four solutions to this equation, we just might need to find \
complex solutions."
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863577594052763`*^9, 3.68635779815547*^9}, {
   3.686357853333789*^9, 3.686357963879951*^9}, {3.686358000080574*^9, 
   3.686358041246907*^9}, {3.7234392645789633`*^9, 
   3.723439286192741*^9}},ExpressionUUID->"e2f084dc-2818-4800-bd88-\
aead9ac16d52"],

Cell["\<\
Usually this isn\[CloseCurlyQuote]t what we want, unfortunately. Happily \
Mathematica can dumb itself down for us.\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358045128088*^9, 3.68635805955816*^9}, {
   3.686358097344922*^9, 3.686358112388624*^9}, {3.686358147395686*^9, 
   3.6863581476914473`*^9}},ExpressionUUID->"98356337-19e7-428d-9acc-\
6339a9832adb"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"polynomialInX", "\[Equal]", "0"}], ",", "x", ",", "Reals"}], 
  "]"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686358485164489*^9, 
  3.6863584933731213`*^9}},ExpressionUUID->"f57571bf-6e93-4329-86e1-\
547a642ef1d4"],

Cell[BoxData[
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"Root", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"6", "+", 
         RowBox[{"5", " ", "#1"}], "+", 
         RowBox[{"3", " ", 
          SuperscriptBox["#1", "2"]}], "+", 
         RowBox[{"6", " ", 
          SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}]}], "}"}]}], 
  " ", "}"}]], "Code",
 CellChangeTimes->{{3.7235964206095343`*^9, 
  3.723596428666101*^9}},ExpressionUUID->"b1fb24ff-2332-43e0-a873-\
fa8dd839d873"],

Cell[TextData[{
 "Notice that we get this odd ",
 Cell[BoxData[
  FormBox["Root", TextInlineCell]], "InlineInput",ExpressionUUID->
  "acd8f5a0-2a9d-4812-9c52-1ee0ce583ee5"],
 " expression. That\[CloseCurlyQuote]s the way Mathematica represents a \
perfectly exact root. We can get its numerical one of two ways. Either we \
make the equation inexact:"
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358680572743*^9, 
   3.6863587426145153`*^9}},ExpressionUUID->"8ccfdabd-cb78-41c8-a4c8-\
0a0865ef2c27"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"polynomialInX", "\[Equal]", "0."}], ",", " ", "x", ",", " ", 
   "Reals"}], "]"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686358485164489*^9, 3.6863584933731213`*^9}, 
   3.6863587298477583`*^9, {3.7234394175666037`*^9, 
   3.723439421711495*^9}},ExpressionUUID->"ca0fb19f-aaa3-4e06-b4cc-\
83f57cebee3b"],

Cell[BoxData[
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "0.867733324263096`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}]}], " ", "}"}]], "Code",
 CellChangeTimes->{{3.7235964206307297`*^9, 
  3.7235964286789637`*^9}},ExpressionUUID->"6a35bd2f-3abf-4c4a-81b9-\
4b15061c17ba"],

Cell["Or we numericize after the fact:", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358744157722*^9, 
   3.686358756814097*^9}},ExpressionUUID->"25556b92-29ed-4249-aa98-\
c0a24722acd0"],

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{"polynomialInX", "\[Equal]", "0"}], ",", "x", ",", "Reals"}], 
    "]"}], ",", "6"}], "]"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686358485164489*^9, 3.6863584933731213`*^9}, {
  3.686358769021727*^9, 
  3.686358780553071*^9}},ExpressionUUID->"02b19238-ac76-4405-ae5e-\
a7705017a5d0"],

Cell[BoxData[
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"-", "0.8677333242630958819`6."}]}], "}"}]}], " ", "}"}]], "Code",
 CellChangeTimes->{{3.7235964206530437`*^9, 
  3.7235964286917973`*^9}},ExpressionUUID->"5ab72144-d9d1-44a8-b767-\
75626a4d0e0b"],

Cell[TextData[{
 "One useful thing to know with ",
 Cell[BoxData[
  FormBox["Solve", TextInlineCell]], "InlineInput",ExpressionUUID->
  "9b468246-1abc-48fd-b2bf-1c35929711d7"],
 " is why the results are returned so oddly. Each list is a different \
solution, which is more important with multivariate equations, which we\
\[CloseCurlyQuote]ll get to, but first let\[CloseCurlyQuote]s see a nice way \
to get out our solutions in a simple list:"
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358787425353*^9, 3.686358833607676*^9}, {
   3.686358947802143*^9, 
   3.686358965455121*^9}},ExpressionUUID->"0b860726-176b-4233-99c1-\
745a5194806d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "/.", 
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{"polynomialInX", "\[Equal]", "0"}], ",", "x", ",", "Reals"}], 
     "]"}], ",", "6"}], "]"}]}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863589686479*^9, 
   3.686358975489811*^9}},ExpressionUUID->"172110b9-e95f-4b52-819a-\
415194c29f80"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"-", "0.8677333242630958819`6."}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.686358975882842*^9},ExpressionUUID->"6d479ad8-41fe-40db-8785-\
3ba82d17b709"]
}, Open  ]],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox["/.", TextInlineCell]], "InlineInput",ExpressionUUID->
  "44630306-e5ce-4a7d-8b52-f7c8399f069b"],
 " is an alias for ",
 Cell[BoxData[
  FormBox["ReplaceAll", TextInlineCell]], "InlineInput",ExpressionUUID->
  "d71d26ab-4c8e-45b3-949a-cce187053cb1"],
 ", which is described in more detail later in the Replacement Patterns \
section. For now let\[CloseCurlyQuote]s just note that any time it sees ",
 Cell[BoxData[
  FormBox["var", TextInlineCell]], "InlineInput",ExpressionUUID->
  "c958bd18-37c6-4f1b-a7e3-f04f22673065"],
 " on the left hand side it looks for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"var", "\[Rule]", "val"}], TextInlineCell]], "InlineInput",
  ExpressionUUID->"ea1387de-6a60-46ea-9457-97a41e061d6d"],
 " on the right hand side and replaces ",
 Cell[BoxData[
  FormBox["var", TextInlineCell]], "InlineInput",ExpressionUUID->
  "691eea81-432f-4503-80b8-caa32a5056cc"],
 " with that. "
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358977744111*^9, 
   3.686359093003912*^9}},ExpressionUUID->"20dc9280-e7a4-40ad-aba4-\
dc1b99247ee4"],

Cell["Now let\[CloseCurlyQuote]s also see how we can plot these solutions:", \
"Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686359229458722*^9, 
   3.6863592511438227`*^9}},ExpressionUUID->"fd6116d3-8c83-48bd-8d5a-\
e2e6afcde0f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{"polynomialInX", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", ",", "0"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"x", "/.", 
         RowBox[{"Solve", "[", 
          RowBox[{
           RowBox[{"polynomialInX", "\[Equal]", "0."}], ",", "x", ",", 
           "Reals"}], "]"}]}]}], "}"}]}], "]"}], "]"}]}], 
  "\[IndentingNewLine]", "]"}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.6863592763812437`*^9, 
   3.686359386789131*^9}},ExpressionUUID->"03abea28-b063-43fb-8b11-\
08cc9901de64"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
RSlGtrFYBPR/Vb4E+g==
        "]]},
      Annotation[#, "Charting`Private`Tag$21788#1"]& ]}, {}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{-0.867733324263096, 0.}, {0., 0.}}]}, {}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 2}, {-1.7516246019083588`, 151.99997926530722`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6863592934629307`*^9, {3.6863593390821342`*^9, 3.686359351215768*^9}, 
   3.686359387462356*^9},ExpressionUUID->"8a542bf3-f861-4fcd-ad69-\
bd99b0dc5bae"]
}, Open  ]],

Cell[TextData[{
 "We have to use ",
 Cell[BoxData[
  FormBox["ListPlot", TextInlineCell]], "InlineInput",ExpressionUUID->
  "fd6881ba-32f7-48c6-96d8-abd9e6e5b766"],
 " to plot our discrete solutions, but we can see we get the result we expect."
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686359364822688*^9, 
   3.686359407059992*^9}},ExpressionUUID->"2ae896ef-0f2e-4791-81dd-\
528e7d3affef"],

Cell["\<\
We could even write a function that will solve the equation for an arbitrary \
value and plot the result:\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686359411262411*^9, 
   3.6863594727539062`*^9}},ExpressionUUID->"ed9984e5-8876-42cf-bed2-\
a589205c6ec0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"solveAndPlot", "[", 
    RowBox[{"eqInX_", ",", "val_"}], "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"Show", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Plot", "[", 
      RowBox[{"eqInX", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "val"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"x", "/.", 
           RowBox[{"Solve", "[", 
            RowBox[{
             RowBox[{"eqInX", "\[Equal]", 
              RowBox[{"(", 
               RowBox[{"1.", "val"}], ")"}]}], ",", "x", ",", "Reals"}], 
            "]"}]}]}], "}"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"PlotLabel", "\[Rule]", 
      RowBox[{"Row", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"HoldForm", "[", 
          RowBox[{"eqInX", "\[Equal]", "val"}], "]"}], ",", "\"\< @ \>\"", 
         ",", 
         RowBox[{"Row", "@", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x", "/.", 
              RowBox[{"Solve", "[", 
               RowBox[{
                RowBox[{"eqInX", "\[Equal]", 
                 RowBox[{"(", 
                  RowBox[{"1.", "val"}], ")"}]}], ",", "x", ",", "Reals"}], 
               "]"}]}], ")"}], ",", "\"\<, \>\""}], "]"}]}]}], "}"}]}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686359476628025*^9, 
  3.686359638174994*^9}},ExpressionUUID->"2a1c98b1-7fa5-4cac-97c5-\
0e01b7f4ce2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"solveAndPlot", "[", 
  RowBox[{"polynomialInX", ",", "50"}], "]"}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686359542945202*^9, 3.6863595588564377`*^9}, {
   3.686359609022843*^9, 3.6863596120949574`*^9}, {3.686359643206072*^9, 
   3.68635965537542*^9}},ExpressionUUID->"3bb2506f-fd21-4ba4-b4f0-\
edc6a56d4cde"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwtmHk81N/3x23ZKkklhOxkKeJjq7xvKqRIZCkRoyRCZKkIlVBJkSSKkZJS
thJJDrIlItmXMTN2Yxn7mLfMb76Px++v+3g+znnce8/rnHsf91xZgq/1BS4O
Dg43Tg6O/427MdEJFosFwmK/algsG+S7Ih+zwmTBKz7rDe/nbFD+Jy2l+UUW
cAwRa88M26C9KhaEERoLPCv2xTU32CC9zZE9jZ0saNFi7eZNskFocLbheR4L
dgd+GHqjYYOso5tytM+x4NPl8FdEV2sU3BzpfbF8DRSP734p3GeF2trWT1S6
/oP1W9woRDiGpCp8t+pJrsK/J7vIPUMmqMiret2mfiaYe1Ud3VphjFxitejd
t1fgIa/bH4MfBxAjISQGMAZY8JTy+aTooVHJygkTQwaMOxL02m/poY4sXovf
OgyYSlTLt7ikhz6Vxm/u38WApzwqTv76esiH+jaFuYUBZg89a+516qJBrbYP
/40tg+Wr5z3jYrrod4v6n5zHy/DTZnuvXrYOyhQiiSdTlmCNY1ut/bIWSnDE
+Az6luCPsfge7UEtdDubuNDdsQSihnpuUs1aiGDs1ryjcQmKuM4KS7/VQnJB
Y5HpX5bgYthscbO9FnrVPzeT9WAJHiU93jT9TRMRP/DVFv23BNq9CUW/pPag
F+Za/n/vLYKvzLcL4WWqSGG9eUNL5CL07NfO83ypinJ+EeR+hy8C025H6eUw
VVR6PLG1PnARgrkkxz8jVdRtuby33HURnOBl2KnaXUjU5vt8tsEiJPl8VKpr
V0GPHI8Gho0vQO1i8cKedcro9mXXa7uOLkDyjVeT1ZnyiBTn/KL00AKMcN9Y
oEbLI8MCx4pjRgugQNbLEbssj+YWbfl9tBfgwMLCbIOOPHINN08ulFqAYzl7
bh6tk0MoQbtk39w8oM/CTpl0WbRWvI5hkToPE0t/0vxOyaAQ7vfB/lNzoLrX
wzD8mwTyee7M6zI2B50FshzV8RKIsGfLU4vBOXjp8ixb3UMCmTuGFqp0z0Hd
dYNTl7ZJILFPllOk6jl4k6qx8tBPHH0mzBOOvZiD0ddPMq9qiqHpyv2WCsfm
YHgqa0W1fhtyjWhW6MieBSXSpW+ajpuRXXe6UX/mLAQ0ig1FGG5G5nuvOAyl
zQKPuYjQjPhmpDMkHDuXOAtEVSc5xW5hxG9mPS90axYODtQHLDkIo9xN7ZWm
p2dBP/CZulGZEMLTepy/CsyCSNYJWZVVQURffn+tgmcWwlpBgb9KEA1ZhSTU
sehwefoHr0yMIPrNJVnbvkiH6oLOoaWtguiVu5PGHIUOQsZF4Qe0BJDZbjKu
WkoHk456PpEAPvT0+3DyC086yMl6nVyR5UHO11LC9C7QwfmGsMO+CW6kon3i
fOs5Opx933m1tJAblWaX7OG3pUOVl8Bx38PciPTkQe1VjA733aZU8zy5kLKn
1oL5VjpY96hqX6jiQP4azLS5kBnY6lr6T3sfjvFkunmq+M2ARwRH6YUeJpYk
1vSfs/sMlNzSmOK7wcS+cRMbf1rNgP5U6r0XpSsYT88RJlFxBnzCJ8+sIQaW
FBVve6J5Gm7XKFYRCItY6YDKhg9y01ACT96doM1gofs5P6aITUPAoUuzzSdm
sAPPuy3uCU0DUWc/F0/RNFZhff+RO3MKGFeMc+7emsLqamgisq1T4KJ/z5Eq
R8PacnLFk25NAfHm1O/UqBFsOlhHOYI8CUSHKsWel71YftuGep+OSYhp8c0U
SujB/LSGPZwaJ4Gx+E0xLrobW5h4+t6wZBLo40rlnkGdGO60rLH4aBI83tTi
t9z+YvyHS3U8sUngYI2ENi/UYvLCyPhUGg0qxKTL5O1zIE6TcsPzCQ0inh3v
OBhTAAyr258iYmjAobyN7nSuCBrjqxU++rPtptH2tNUyCNhylI/XlAYyy43i
Y8waqBW1biyemQCHDoLnc/1W8JQ6b7fj4AQwdh07358/AG0H1j3S0p2As/46
qkVGZDByzqozVZsA9QVK2OnXZNiSPqYfsG0Cruh1lHz3pkCZjPeOpvFx4LfK
3c+1QgUhhSByWMI4BJwelx+fHYZC1RhP6uAYVNz1yYq7QoOdf1y+qnWPgcOb
gPi1ShrEBhvwB/4eg4ijaXwUkUm4UD3xhu/rGPAsOtizCidBzNmCoh43Buc9
c2o+Tk7BzXgRh2D9MVj5MJgoLk+HCT1aVoXGGJTeOb8uwpQOdqQfiwLyY5Ba
bL0304sOmmqBT15sHIO1Uf1UmU90oFZ3/q6kjgKPnPyzf0azYMZ4cWTDw1EI
zVU28zWfg6K0wETb26NQd8C4vtRzDuSOWA6mBY+C0kChc+39OcDjWRFahFEQ
sNqRId0wB7lqhDI7vVH4HWen131kHraeU9bOoIxAScaIwmutBRioKZDR1R2B
iHXS9KXeRQi1WTmsrz4Cjwvu/+GYXwQxCrpkKDcCFgLar7oElsBqtbnASGgE
hJVM8+d0l6Bi77Sx6cgwaL9SbGuLWwJiuuoFh6RhUClWSL763zLs1/C/dyZ2
GDzWKIM+R5ehq/Trx7O3h+HhMc14Q6dlEO4wW3LxGQbhdtH3hyKX4daGi9GX
TIYh28GVW7ZlGQjXM9/dWBoCUY/ysF3nGLDGS2sKnRwCJ5/Bov1XGJCSuHcu
jDoE8Rn8OXK3GNCaV2l45/cQxA1ccbv4igGHRgZ+PcgagoUn37Z2URmgYCM5
/cJuCPrtA/2CHFegguwmkn58CLYLfflSe2kFzvrk6GYYD4H0cDjHZPAKJN4z
DH+zewhiv1prfnmyAjwVDsK5vEMQtfqaevznCgyrP90LXwah5BnR/pU6E1TD
3kyP5QwC8V98g6UBE3yai96LZAzCV1ebw7+OMIHh1yHn/mAQBlP1cB1nJggW
b9+y0WUQDPjC9VtimXCCX6VZ13YQjud/f82ZzITE0/oPXMwHQcYh1Z8nkwlS
qw7cn3UGodDBkRRWwgTNgynzZwQGYYBBeHmMwoTAhPd5kWtUkEiilm+gMaF0
sNQrd54K/B/3PyUuMOFQVO8gJ4kKswYkvoN8ONj9kmzLLqRCoX1d/CVVHFIk
NR63vqWCoffAaPVeHAa8DxxffUEF0ux1owVDHDyEnatPRFMhPLjhcbM5DiG2
6Z+XHKlwJvvI/pseOFRk5V2ROUmFlw8LBG764sDDAHVzEypUnPy8wzoIh7gU
8uuXmuz5qGYfQ+/gQByQfXp4HRWMBJJInak4DGvuPenDpEDzWMCuqAwcVG8b
b0yeoYB3vNei4FscPim43aV1U8B4lPghuQCH2kuvAxNyKeC891F7fTUO6799
1irLpICQ4PmLe37iYLWhZmo4mQKETUZ53k04dOcOXzC4Q4FH9/RX/NpxkOZY
knW7RoGwXBVT/W4cCCd5SbHsewO5fqd29OEwOa9kR7anQECg0vOXgzhoHtET
EbSgwHHRrrWaERwCk0x/axtTAH6MmdaN41A6an/fSY8CZmdCnmdM4rCm72ES
rc7290gUs53B4dD9a1wFshTYvltigjKLQ0xvTHmPKAWoL9v2mi3gsDnsne5u
TgqMfvcty2DgEPVFpV54mQw7vVrVA5k4MKffnp6fJAOxWC5GeRUHH2VlWjuV
DHv8Wmgl/3CgnssKLekiw8ULOoG7WOz8JisKpf4mQ7nr44PXOVahoeV1+s1q
Mvhpb/LJ5lxl666g5VJKhtS31duLuVah8GBmlXE+GZQffHR8w70KSjfkTilm
kaHtfZ7dVZ5VSCnMGOZ7QQbdv88VZdetghBNJngingzFLfLDuWy+LU/kb4om
wyPf6QJJ3lVYctyZkneTDK0hd7I92eyZmKaWcJUMhErb4WQ2kxqlvgdcIsPS
+srIt2y2XvfS0v4cGXYoC2Ymsbn2gCTZwJYdH8n5rDubDYNS/SSPkcFztb1R
lM25uRLcLESGluO+wtns9eVGnydSdMmAUrYckmBz0k5xpWp1MnjkJUZ4s/cv
6JBcnCVHhga7j0MZ7PjCHm8/ek+MDFVnOB/8L/75+qQeLyEyXLsr9SiXrc9F
TtHLljxkmCMGb4hm6/flqiruujAAa0E+0gfZ+qYNqUgrkwfA5M9Rch9b/yhb
5YOTvwbA9Lqh95n/5adW8XxB8QBY6Z8hf2Xnz05PIToocwCiOnNO4ez8KovL
NnGEDIB6T+gHhUUchO/vpNe4DwB/c1zNhnkcGEypLQ+sB2C0dtm8k45DfZ/E
6W2qA/COvMSzlV1f+RbioT3bBiA54aJPFLv+ksu3p6dzDsCbi0Mfe9n16UHc
OryrmwTmz0u376Gwz8PmLfwz1SSIjdQN0iDhoH97s9rnfBKY5nNv2dSLg8B5
IT+jGBI8Ger2CW3D4b0y/z9rPRKIBrvf5KrFISGZV0ZMngR/pNZeSFXhcENg
3aF+IRJc1ZOtkyzHwZzGee/iSD+c7/ZLryvCgZaLbw192g8bPDZKtGbi0LaT
qXfwVj9Y6vmbCafjUPaYcYbXux9oxD5T7RQcYv0XiY8P90OOjfkOlcc4qOvO
qL+Z74M2okFp8w0c3HeHh3/t7wMrm8hd5QE4pCttam2q64OUhpyEhz44iGzf
E7yU2gcB5lMNza44LC/7VJoe7oPgkhbRYRMcqr5O204k9sKGJGi5vB6H1YKw
7LWwXvBjcRRf48bhv/dCuMilXlAX2ut5EWdCdspu4r4DvcAv0Pp2aoIJD0N8
JmKHe+CwqVwssZ4JDgemw/bo9kBMCMwWhzEh4b+wP4dkekCdaJvwL4AJvzSE
FBwEe6B2Qf+TshcTjKR3/4wgdUNrjQdplz0T5FneW1qjuoF2hz9vTIMJ0xVT
bwM6u0DPRjzIvWMF7hyeavl6rRM2GdpzCm1dgSqzyRM6bp2A58NbK74V4LCg
/c616AThvE/FIUwGhNqON2bKdcKXX8oeD8gMCHIfrn/Y2AGNN7WsnuQwwCOm
v8JVpgOc5rK47Q8w4HhjU75AfRs8njJW0LVahvstjXsiC9tgY3h+wAe0DPVt
v3LXXrTBtV+NTzdqLcOR/p8f5v3awEMEPXq8eRmMpmuy+3e0AT4ztD/1zxJo
CpcTC3z/QoOE+OZWiyXYdir38entrYAkVzl19BahUOlB6RHuVvhxbfnlGaVF
sFq5OKQ18wcYFPz6lW2LcD9NVl+w7g8UlbhIe84vwNpY4kBp0B/YORx2NCmX
3XfdDNkt2dECDbRl917ZBfA5EZ/8fVczGDzKknBenYPCpZpN9QoN8JH7vqDy
HTrEvX9VZbTyE9Ldw39kXaaDl3N4YFHTT1CJ6MO22dFBoVa/91XQT3hOKkwr
V6FD0tOcrJv19WDq9Y4QnTIDN3TiD2hfrgMzUrW1gdI0GPuf9Ur7VA21y1Mi
5xRo8KZ3+OF4ZDn4RCTwGH9nv0tOSn7udXsN/8qyXr991gRfBUPaqwIzMaVf
WiWy8r+x/6ic0rccALvdYnklU2YCk6d/WzGs+onpNl+dvL1jGTua2d1k6dCK
HVVtNjGY4UT0u7nuNd6tmCfF/26sIBdK9rjD2nenFWsSc2ucU+RCYxoaWrty
WzGXUIlvjLNcKKYkIpGb5y/GaZ4nOvmLC9U3KTuW5P3F+v4lNEZ85EamjMAx
Wb52TFrwtOtw+Dp0xEKEe7GoEyuOW/IduiCA4lwFZld+dmKC+3xFnCIFUFcg
x8BaP9uu2B038UoAeaZNl/LzdmEPGnIdD5PZ/jMN/pJ2XdhC6EbtRUdB1BV/
h3poqQvrWNrl6Wi/Hnl2LFQm6PZgTTGXf5Y4b0SPznVGaBb3YeEbTqyOsfvH
qMn92EhjH2ZgIhgbPyWMwq6/+pdK7cMkLKKVjnJuRj5PvG/wCfVjPwef5A2r
bEaWddwBpPP9WK2eUVj7tc1IaI/mxVgREvaMte1e6g4RFLcWYzHmPYBFSWiA
tPcWVGcptdFKhIJ9omO8vIdE0dbdFFF/SQqWwRhNOXJaFLlsfCOTqETBKmvc
rJ76iiLmL3WdLkMKZi2sZnnhhShSP7rf0cWNgvGfeTBWvySKHh9yfHflMwW7
uKhq9i53Ozqj//xIvB0VI6YXnFNUE0dTstvCWlMGseLff+z+npZE+iEZfpWv
B7GPpj/Nlq9KotttGhfycwexoj3DjRpxkkg02uR4XNUgNj9+t7y1ShIZTQZL
mE8MYpTW4I//1KXQoy89XyoNhrD888KrVB5ppHWMOJPfNYTprwZEmvzYiQID
1FwfiY5g+ePN/LnlskhUcKbMTnYEi0aZLinNsqgkvVBMWn0EW/+dRHxClkWr
DQYtHw6OYLMRsWsfuOTQbVkzrOHyCCZkEq0WaiqH4n6fl1r3YwQbuXPYKPGv
HMpSSeu+4TuKnSvpSKUtyqPOPmFr9/oxTLPDSsDkghIyf3ChK6B1DNsht1hp
d00JlRmUOt/pG8O2KUnWBDxQQsQkNy8ifQyr+L7nV1eBEvKw+hLZIzaOxZ0q
KTnIUkLMH47FlpfGsY5TZJ20F8pIMidLUk9wAtM+mCj7jaKCXK7vH+U7TsNc
IioiTz9TQ6rn69un7dj8LGnDSJ4amrc8Vd3uSsPKqF05kfVqKErhckZmMA2L
WzF3YqyooQ/NqY5YJg37l3m2ptRJHa0o4s1BTBoWvPbhdpGKBkpo/VoynD2J
jZ/wPtjauBv9UNO7/2PdNLZ/AOcSV9FCSgJlY6/N6JiqTMzre1QdJFXmdWRd
zCxmVcUrwqFugDiYXO/8qXNYksB/atnpRmj55HfnGsUFLMFgk3WcqTHq1Tm3
QzFyEZssenAqmtsEXbEX3izXt4QNiX9L6T1kjsQThxx4pBhYwLum/LBmS5Tr
SHw7f20Fs6FePjurZ43sD4Sb1X9nYv+y10va6tiiAmdvOcNVHJOc1hacCHdA
DMFD3F9t/2FGc20sxt2zyPrPPl2p5DVs5m1UPZezCxLct76y7OUa9uHLdDP9
oguqfN1z7GzmGsYnzvN80M8FaV677pqau4ad/pEU1HnXBQntLI4Vr1nDtG8I
xjI+uqCfl/cObptbw57cjImSZbkgxL/rsdBxFqYqtxcXf+OKGH4MidyTLCyF
MGGTmeeK8nrr3ljYs7CeE+0ZWqWuSDrP/VssgYUdNq6Vd2p2Rau2r0cEr7Ow
ENevUzMrrqg4c+cBviwWtl1ojo/XioB8Ns7UZeWwMPfCquCBMwSkFFxubVLA
wkwV5pa+XyCgRHMnj7tlLCxgG5fq/RAC8p9NecL9l4UNbeKNP/eWgFQdPaUz
u1hYvyjtnWshAVGqDd4Zk1hYrcO5AY/vBGSV3FV+a5yFTeMJWVF/CYifK/uo
7AwLU6jO2PeSREDgFdxWscDCDj0lzZeME1BQu8k5FyYLu9c629K9QED//z+M
RSlGtrFYBPR/Vb4E+g==
        "]]},
      Annotation[#, "Charting`Private`Tag$22730#1"]& ]}, {}, {}}, {{}, {{}, 
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      PointBox[{{-1.7927106791341156`, 50.}, {1.4049876548383458`, 
       50.}}]}, {}}, {}, {}, {{}, {}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox[
    TemplateBox[{
      TagBox[
       RowBox[{
         RowBox[{
           RowBox[{"6", " ", "x"}], "+", 
           RowBox[{"5", " ", 
             SuperscriptBox["x", "2"]}], "+", 
           RowBox[{"3", " ", 
             SuperscriptBox["x", "3"]}], "+", 
           RowBox[{"6", " ", 
             SuperscriptBox["x", "4"]}]}], "\[LongEqual]", "50"}], HoldForm], 
      "\" @ \"", 
      TemplateBox[{
        RowBox[{"-", "1.7927106791341156`"}], "\", \"", 
        "1.4049876548383458`"}, "RowDefault"]}, "RowDefault"], 
    TraditionalForm],
  PlotRange->{{-2, 2}, {-1.7516246019083588`, 151.99997926530722`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.686359612517045*^9, 
  3.68635965223167*^9}},ExpressionUUID->"a0c0c9c3-c6fc-42a6-89cf-\
907f447423fa"]
}, Open  ]],

Cell["But that\[CloseCurlyQuote]s getting distracted, I suppose.", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686359666486854*^9, 
   3.686359681292849*^9}},ExpressionUUID->"de5e7296-bcd8-40c8-88ce-\
bfdea985c2b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multivariate Solve", "Subsubsection",ExpressionUUID->"b1584b63-863a-4428-aa15-7bb3af866339"],

Cell["Let\[CloseCurlyQuote]s move to multivariate equations now:", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686359095163931*^9, 
   3.686359102531818*^9}},ExpressionUUID->"43754a3a-00f8-41d1-9625-\
48f5776824d4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"polynomialInXandY", "=", 
  RowBox[{
   RowBox[{"simplePolynomial", "[", 
    RowBox[{"x", ",", "3"}], "]"}], "+", 
   RowBox[{"simplePolynomial", "[", 
    RowBox[{"y", ",", "3"}], "]"}]}]}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686358841080882*^9, 3.68635886032716*^9}, {
  3.6863589313362503`*^9, 
  3.6863589327601147`*^9}},ExpressionUUID->"bf340d07-c272-4db6-a60e-\
1c2dce0de6ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"8", " ", "x"}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "2"]}], "+", 
  RowBox[{"2", " ", "y"}], "+", 
  RowBox[{"10", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"8", " ", 
   SuperscriptBox["y", "3"]}]}]], "Output",
 CellChangeTimes->{3.686358861731078*^9, 3.686358894838168*^9, 
  3.6863589330512342`*^9},ExpressionUUID->"914b30ff-93f8-4e3f-a241-\
d8b410b82abf"]
}, Open  ]],

Cell["\<\
It can still solve this equation, although as it will admit, it may miss some \
solutions.\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358902205203*^9, 
   3.686358925247575*^9}},ExpressionUUID->"4afe6403-b5c6-4be6-8992-\
00adf182236b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"polynomialInXandY", " ", "==", " ", "0"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", " ", "Reals"}], "]"}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358869826913*^9, 
   3.686358880158826*^9}},ExpressionUUID->"036a1da7-28e2-4fe7-9fd4-\
10aeed6f0552"],

Cell[BoxData[
 TemplateBox[{
  "Solve","svars",
   "\"Equations may not give solutions for all \\\"solve\\\" variables.\"",2,
   108,13,27613417425311650783,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.686358882451934*^9, 3.686358897034691*^9}, 
   3.6863589344178333`*^9},ExpressionUUID->"3bf15e4a-c03a-45fd-929d-\
500d9ae5ee33"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], "-", 
        SqrtBox[
         RowBox[{"4", "-", "y", "-", 
          RowBox[{"5", " ", 
           SuperscriptBox["y", "2"]}], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["y", "3"]}]}]]}], ",", 
       RowBox[{"y", "<", 
        RowBox[{
         FractionBox["1", "12"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "5"}], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"829", "-", 
              RowBox[{"6", " ", 
               SqrtBox["19029"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"829", "+", 
              RowBox[{"6", " ", 
               SqrtBox["19029"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], ")"}]}]}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{"ConditionalExpression", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], "+", 
        SqrtBox[
         RowBox[{"4", "-", "y", "-", 
          RowBox[{"5", " ", 
           SuperscriptBox["y", "2"]}], "-", 
          RowBox[{"4", " ", 
           SuperscriptBox["y", "3"]}]}]]}], ",", 
       RowBox[{"y", "<", 
        RowBox[{
         FractionBox["1", "12"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "5"}], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"829", "-", 
              RowBox[{"6", " ", 
               SqrtBox["19029"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]], "+", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"829", "+", 
              RowBox[{"6", " ", 
               SqrtBox["19029"]}]}], ")"}], 
            RowBox[{"1", "/", "3"}]]}], ")"}]}]}]}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       RowBox[{"-", "2"}], "-", 
       RowBox[{"\[Sqrt]", 
        RowBox[{"(", 
         RowBox[{"4", "+", 
          RowBox[{
           FractionBox["1", "12"], " ", 
           RowBox[{"(", 
            RowBox[{"5", "-", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"829", "-", 
                RowBox[{"6", " ", 
                 SqrtBox["19029"]}]}], ")"}], 
              RowBox[{"1", "/", "3"}]], "-", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"829", "+", 
                RowBox[{"6", " ", 
                 SqrtBox["19029"]}]}], ")"}], 
              RowBox[{"1", "/", "3"}]]}], ")"}]}], "-", 
          RowBox[{
           FractionBox["5", "144"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "5"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"829", "-", 
                 RowBox[{"6", " ", 
                  SqrtBox["19029"]}]}], ")"}], 
               RowBox[{"1", "/", "3"}]], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"829", "+", 
                 RowBox[{"6", " ", 
                  SqrtBox["19029"]}]}], ")"}], 
               RowBox[{"1", "/", "3"}]]}], ")"}], "2"]}], "-", 
          RowBox[{
           FractionBox["1", "432"], " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "5"}], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"829", "-", 
                 RowBox[{"6", " ", 
                  SqrtBox["19029"]}]}], ")"}], 
               RowBox[{"1", "/", "3"}]], "+", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"829", "+", 
                 RowBox[{"6", " ", 
                  SqrtBox["19029"]}]}], ")"}], 
               RowBox[{"1", "/", "3"}]]}], ")"}], "3"]}]}], ")"}]}]}]}], ",", 
     
     RowBox[{"y", "\[Rule]", 
      RowBox[{
       FractionBox["1", "12"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "5"}], "+", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"829", "-", 
            RowBox[{"6", " ", 
             SqrtBox["19029"]}]}], ")"}], 
          RowBox[{"1", "/", "3"}]], "+", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"829", "+", 
            RowBox[{"6", " ", 
             SqrtBox["19029"]}]}], ")"}], 
          RowBox[{"1", "/", "3"}]]}], ")"}]}]}]}], "}"}]}], " ", "}"}]], \
"Code",
 CellChangeTimes->{{3.723596420677847*^9, 
  3.723596428637898*^9}},ExpressionUUID->"efc2aa4e-a861-431c-ba5b-\
99590e8ead63"],

Cell[TextData[{
 "Note that it also gives us these odd ",
 Cell[BoxData[
  FormBox["ConditionalExpression", TextInlineCell]], "InlineInput",
  ExpressionUUID->"8e1b1383-96d2-442c-a575-0a0e1857c66f"],
 " statements. This is because the solution could branch depending on how ",
 Cell[BoxData[
  FormBox["x", TextInlineCell]], "InlineInput",ExpressionUUID->
  "677f021d-8f74-4a6a-8ad8-2b7f861f6701"],
 " and ",
 Cell[BoxData[
  FormBox["y", TextInlineCell]], "InlineInput",ExpressionUUID->
  "0232b6c7-183a-4386-9dc3-610b0822e197"],
 " interplay. Let\[CloseCurlyQuote]s just get take one of these solutions and \
plot it: "
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.68635910851311*^9, 
   3.6863592148660393`*^9}},ExpressionUUID->"11b98f49-1065-49ca-8bb5-\
68ec5b98fb7b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"conditionalSoln", "=", 
   RowBox[{"First", "[", 
    RowBox[{"x", "/.", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{"polynomialInXandY", " ", "==", " ", "0."}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", " ", "Reals"}], "]"}]}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", "conditionalSoln", "]"}]}], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686359694822159*^9, 3.686359773699697*^9}, {
  3.686360013245347*^9, 
  3.686360035172333*^9}},ExpressionUUID->"8211d535-02b7-4fc5-b81b-\
f3655cdbf62d"],

Cell[BoxData[
 TemplateBox[{
  "Solve","svars",
   "\"Equations may not give solutions for all \\\"solve\\\" variables.\"",2,
   146,25,27613417425311650783,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.686359701784246*^9, 3.686359774079051*^9}, {
  3.686360013717988*^9, 
  3.686360035554996*^9}},ExpressionUUID->"801e9bdd-bdfc-410e-b3ff-\
165d2941c7bd"],

Cell[BoxData[
 RowBox[{"ConditionalExpression", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "2.`"}], "-", 
    RowBox[{"1.`", " ", 
     SqrtBox[
      RowBox[{"4.`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.`", " ", "y"}], "-", 
       RowBox[{"5.`", " ", 
        SuperscriptBox["y", "2"]}], "-", 
       RowBox[{"4.`", " ", 
        SuperscriptBox["y", "3"]}]}]]}]}], ",", 
   RowBox[{"y", "<", "0.6609358769285026`"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.686359701801539*^9, 3.6863597741043987`*^9}, {
  3.6863600137470284`*^9, 
  3.686360035581798*^9}},ExpressionUUID->"c2328830-5ef9-4ec6-b4df-\
ae8f03873d30"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"conditionalSoln", ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Value of X for given Y\>\""}]}], 
  "]"}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686359732755932*^9, 3.68635973482272*^9}, {
   3.686359777811322*^9, 
   3.6863598427933197`*^9}},ExpressionUUID->"b5e13745-015f-44f8-a244-\
b1174ce587a0"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
S1+56b904HxeemQjNpNeFXbnNx3olgppotidrvzTK6boUPNBz5/lL4vGpx+M
0mFstLyW5Wz/yDwKgw5xLy/5s74fK9C7IXKADu6Ckx9Zvx9uQXKpd9NhqjeG
3Iztm/hupquDDmdskjXFsd1mVwzeaaaDj2nNB9b47Q6db9xYR4crtys9WfEZ
P64oKvpChyO3rIAV/6HubcnnSunwYuGMEys/Sjvvv1gqpIP06+v+rPxJujP9
3+bSQXXKnUsVW6j8iJtWBh2uh0jMsvLPTkmxHkihg9SImiFrfqYs+Qx9E+iw
+dFtQhd7MMlZY+t7OgxTU/YdxW6Za9hR8ZoOdefCmk9il2krCF+MoEOb+VCT
GXZMz9SvhBCcP112XgdWvDImPYcD6TDeqKfryor3Zk4N04cOUaLczFus+ARv
xcu40yG/lbAPYcVn1RVe60qHiXfftJ6z4kvR8HFypMO7kR1+b7EldP+Zp9nQ
ocLOTjMHmxJupX/cgg4SGc3ZCJutD1QnTtOhHzWG12H33/KlKB2lw8I6n3s0
7HepXF9yVOmgmMyQFMP7LWzBIctUgQ7iOiurZbB99Gre/ZbB+a4palbHtul/
eFddnA5DqRShs9hb1gopFvPQwazKkYzCFrD9b7PVKjpoTiWwp2EvfWzjXV6m
gZPXI2mE3Xv4BV1rlgaCi3avaazz4q5YVEUfDWR6z65TxedNaLXng4vfaUB/
K8o8gu0l3OfO2U6DqffhotbYVp/en9SvoUE/9eO7YOxNP7dz1WXToCAiV4aO
HWWg6Nb6gAb3uaWX0/D5J8VrUNPkT4OEI82/qrBTau0kG7xpwK+8T3EAu+DY
s5bqGzSYeeMfv1aTVR9+K5XY0uD6cVMjb+x1p4qnE9Vp4P5w9/Xz+LyOXtNx
NEGFBlqX6Wb3sLe1jcfGytNgc6NsyFtsldPiJtHb8Pv+PuvsxjY+45f9VJAG
+QmqPBa4Pjy2OHLDa4gKCTsqky6y6omYXf1dKhUahrWPB2FHd9/ZdruPCmK8
omQKdtq51Pb/2qkg5bn0dxK7zppQu1xKhbXmnKO+uH6tvtA+d+olFVKM/l7O
xPXN18n21s4jVPi55Oihh+tnb6hVVIE2FeipD/JvYGtkWKCjB6jglOauE489
NXt6tYsyFUJX5BmswvXX1tsgMnMTfp72ivsrtla4cv6+qZ/QMKohYq2P5zNv
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
Qzcc/Qxeu9dYsdZ/z+4prbAtn8GQyzs1DzvieUqCZ3U+mFt7v0th7ZcjQWdn
ovJBqLNDNx77+L8LfI7X8mHvlueZ0az1e3Gzm5loPjzorh1g7dc7Kk80lZ3y
oFjg61M3VrxM54kkrTyIVlhyvYKtHGUQKy6cBw5r49faYY+u5OAWKMmFEbX6
tBPYVq3ubUwiF6KNdu7aha1x/9R9a2oO5PM+3iuBLbJPQaMjPwdkpV15RbCb
YobeltvmgDhNegU79iE3S8forGzQ+Cu4sx2fZ5u3q28WDsoGisOE1VfsP13C
zSGW2SDkaHy2GDv7YKPa7VXZ4ESVeh2HvV3wELvJmSz4sj7quCs2e+XmnJpd
WcDxQz7BDrvv1p9LB9my4NmMITLBjuzPrpdLygQV0dQDrPOcJ33HS+4/GXDB
wM/mLz7/6ec5jvk0ZsAo37/GUexykYGludgMKLHkZO/B9vB+dYF6LAM2fTny
kVUvxo34FSA6HcRJiU23seN/0B4N+adBxoSDHh3Xp+8e696+UU6DluRAsTZs
gc2H008OfgSTL+cKS1n1zCax5TP5EWpONBlHYevRrogEL6ZAW8M4zQibOf7r
nYxrEujJagUmceP1GSae2bs5CWa2lfx4in1C8WR5eH0itBSemvfEzv8vk7Yo
kwj3/SwDT2I/mL8uU0tLgJJU9ulZXH9l2BezHC3ioJvf+7cytlWsTOUWnjgI
bhDOFMUO17HoaM2PhRVhYkorsBcDi+b3rYsFO1PCt55V/3m9Nfma34P+qTdW
57G/yawOPfsoGvi6+qf8OCno3Emx7B/nn8GEd3vNC9xvjE7Pqt+oeAq5pzPj
bmJ7RDSCwLanwFa4SvsMdtQP39qD9CcwdSGxThg7u7al8nhzKEjyrhIMW0lB
n2actjK/+4OJnfbh27j/8WmTbttYrgmhl15mbML9lCzRc2XVbikyhH+mYWSZ
QB2Tvm8p8/qk+xae4tfYd5/q1Tiq2JBXys9tWVwiULn4g/tvKG6kx+eSuXTc
r126JGOfu+RLelGJUk7cz33mudteduMpKaVVr3tyFt/Xdgu3fpJ8RkrKTjgP
zeB+8cSnpqjGZ6Ts8IZFH2yTiJ+17jsjyFzPC5pp0wSakDhWJtMTSfL1sTus
mCLQdvVNn8J1okkthrtA8DiBvmZZ62Q8iCM9jK1iJXH/ur9StnxHfxwZbq+M
EnC/m96xcDBaLZ4MbprcI4MdsfCUDPkZT6anLKvJ0wh0gazWuKj5gdRXlnVU
/Emg5RoFxQ2TSaQ5R93ldX0EUh1csfme2SdyVHwqyaaDQHIFZyYVkj6Racll
h7va8XjCP1b0L3wiPTZ5Gp7E5n2fqvrOMJ2s+PvpMdlGoL8nzLqXx9PJmY/c
zLW4P+9J/7QTFDPJiA0i6TH1BHrralWhmZdN/nx5oU2/At//LLnTnvdlkz5v
X05+LCdQpH72izGuHDJ5+30XIewwcR7HN2Y5ZKeMV2BXKb7fNuUI/lvIIZ1i
3XfYAL5fKPBbF+3PI68YrJwyKsD3h4nCBY2yz2Q4e/mX9E8E8qjX9p8Z+0zq
h+59NZWG5ze5ViBtQwGp91vtgzJ28MUfWyWuFZC/JuycslJx/r8vGnKJF5JX
pDxfJiURqKRSPabVs4hMzTeQc8X3EfPXeQZO6kD2/5eVfT6CQEdiu+qNzMpI
81MxYo238fcD0uwrnctIosK6s/8W6//Tfsv7/MrIOIpj4SS+7zB371bcmVZG
2iT0/aO4Eygo3+fZSo5y8l2Kna2uG4Gq63dY5H8qJ6sHNhwNuEKgw/M3mBJc
lXi+qb1W5gTSNRRaOZtTRTbyPe223YPv37bckwtfq8idfrRXRmoE+naDrW+p
p4p8W7L3voYqga5Ejxes5qwm18U7MAll/PyvGjcx02ryQHp4Wbocfv6J36D2
XDXpxOHgW7MNP98xUxquVkN26BcHWKzB91/rTh+FvDqSIvHmcs+IAAoc3U/S
6+pINq/lN+7DAsjrdsy/14N1pGjowWKBIQHk8tT5DpdAPZmpubNgH10AGVWt
vN57oZ506q17E9QvgATkFS49FGogjR+sfTTWJoBCl4IMmc6N5INRcr6vSABV
GW3iPyHUTKbLKxTqPBBAa+UG1rmJNZOd/BVf0u8LIBv+ePFn25vJaqZpycZA
AbRYK6vyTaOZFNumfnXcVwDJHtlvYXO+mbTQFKwO9BBAYdoWSa7ZzaSk1+12
36sCyHzvS90npi0k1ceGjDMRQGMSwl4tr1rJJpUJ78sbBdCN67tsH6/rIIOC
O/uCovhRZzfF2L76G+me2B5WvcCHDEIufrve8o1M/W+uS/E3HypSL7Dy6/5G
+n9UufZyhg+9izjv+G7iG7kkvzrg/C8+5HAi1//7+i6yRi9u808qH1ost8gz
utxFSvHXzIc28iGxlASxPTzfSYaH1ODjWD5kc3s/g+vYD1L7+Jc8qi4fkrlQ
3T5u+oMsyt4Q++wQH5o2Mqlot/1Bjqv/2nKI5EOBUk7vY2/+IE9cnKp4vpcP
pTa+tiBjf5BaRap3t+ziQwvb/jS6L/4g63bx+BYQfCi85XM+LbGbDLk9Yfmv
gxeV79oTXL6ql3z4d8fE+nO8yEreJHaS6CV9pKvlLc/yonmla0VbRHvJ4JGR
tKjTvEhWI2X8rlwv2Xkjw1rYiBc9099ySuVML3nIJlCVdoAX2V/kEotP7CVl
kezEny28aPXbzo+BR/tI3cNeu8b7eNB27iJmnH4/GfxphJ9iyoOmquSuxBj2
k9JCp1LfnORBJYHvR94a95NRwe4ZOwx5kCnH/fFXlv0kvZ2rW0GHBwUsn5wJ
c+0nRffLSIko8SDqLGPZI7KfzJPI+CnHz4NiBteInGb2k5GSllrnETdyeR8Y
aTzWTyK5Ie7/CrmRhs3ChhNT/eSJP4reXrncqKWnV+zo336SP1j8ZFAqN1rR
lSR5kDJAalVurLWP5EY2jaTc7r0DpNKkaIT+VW60qchRd1XQAFlHXRNuv4Eb
rd2wuOjyaIC8U250/MIabsTnHpT+LXyA1Nn0Ps+Cnxv9lY/fmPpmgNyj98tk
zwpu9D22d9I4a4Ccb15x+B1zNbp6c/Ipo3GAjLhnWH6qajX6H3RHqVU=
       "]]},
     Annotation[#, "Charting`Private`Tag$23161#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, -4.013694051647072},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox["\"Value of X for given Y\"", TraditionalForm],
  PlotRange->{{-1, 1}, {-4.013694051647072, -3.097327733805467}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6863597846670647`*^9, 3.686359793728816*^9}, {
  3.686359824762768*^9, 
  3.686359845500127*^9}},ExpressionUUID->"ad7c31a7-c258-4b83-9593-\
4d1ea35a20bf"]
}, Open  ]],

Cell["\<\
We can force a given branch of this conditional expression, however, by \
telling Mathematica what it can assume.\
\>", "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686359877552004*^9, 
   3.686359923029771*^9}},ExpressionUUID->"38d3f84c-a2cb-40cc-a4ca-\
acf72422280c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assumptions", "Subsubsection",ExpressionUUID->"31474e89-0b3a-4a8f-a54f-0b3b443c948c"],

Cell[TextData[{
 "When Mathematica simplifies an expression it checks what we\
\[CloseCurlyQuote]ve told it to about the expression. It does that by looking \
at the value of the variable ",
 Cell[BoxData[
  FormBox["$Assumptions", TextInlineCell]], "InlineInput",ExpressionUUID->
  "92bc09cc-0fae-42a3-9fea-a5e364b68b38"]
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358120798149*^9, 3.686358145643835*^9}, {
   3.686358191167137*^9, 3.6863582505785418`*^9}, {3.686359926037137*^9, 
   3.686359936197467*^9}},ExpressionUUID->"b58810eb-7e00-4fa4-befd-\
c9fa8d044f71"],

Cell[CellGroupData[{

Cell[BoxData["$Assumptions"], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686358251659954*^9, 
  3.686358253774255*^9}},ExpressionUUID->"f758708f-c04a-40e8-923e-\
fa651b38e8b9"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.68635825405378*^9},ExpressionUUID->"412f76c3-377e-491b-a6a3-f28b1a1cf990"]
}, Open  ]],

Cell[TextData[{
 "This is the default value. But we can make it assume things for us. Let\
\[CloseCurlyQuote]s assume that ",
 Cell[BoxData[
  FormBox["y", TextInlineCell]], "InlineInput",ExpressionUUID->
  "39af4525-6b5e-4cce-9953-72cd92773a3b"],
 " satifies our ",
 Cell[BoxData[
  FormBox["ConditionalExpression", TextInlineCell]], "InlineInput",
  ExpressionUUID->"ad198fc5-c4ef-43a3-9e13-9dfe97a9ee1e"]
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358261391191*^9, 3.686358314525106*^9}, {
   3.6863599603016863`*^9, 3.686359978016911*^9}, {3.686360099313184*^9, 
   3.6863601156696377`*^9}},ExpressionUUID->"7d10ddad-fced-46a3-bc9b-\
ce801fa20534"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$Assumptions", "=", 
  RowBox[{"y", "<", ".5"}]}]], "Code",
 GeneratedCell->False,
 CellChangeTimes->{{3.686358289663618*^9, 3.6863583236626863`*^9}, {
   3.686359980686516*^9, 3.686359981356316*^9}, 3.68636004224364*^9, 
   3.686360081193965*^9, {3.686360118689357*^9, 3.686360120464699*^9}, {
   3.6863602226116123`*^9, 
   3.686360240378673*^9}},ExpressionUUID->"17e57d4b-aa31-492b-9e50-\
36be4f61dfb5"],

Cell[BoxData[
 RowBox[{"y", "<", "0.5`"}]], "Output",
 CellChangeTimes->{
  3.6863583240424547`*^9, {3.6863600432817907`*^9, 3.686360081427202*^9}, 
   3.686360120841889*^9, {3.686360226440548*^9, 
   3.6863602407794333`*^9}},ExpressionUUID->"0342670b-53c3-47ee-95f7-\
2833d390732b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xAndyRoots", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "/.", 
     RowBox[{"Solve", "[", 
      RowBox[{
       RowBox[{"polynomialInXandY", " ", "==", " ", "0"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", " ", "Reals"}], "]"}]}], "//", 
    "First"}], "//", "Simplify"}]}]], "Code",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686358325005707*^9, 3.6863583266090527`*^9}, {
   3.686360045542066*^9, 3.6863600903618*^9}, {3.686360125234393*^9, 
   3.686360149308981*^9}, {3.6863601980296783`*^9, 3.686360206180956*^9}, {
   3.686360251226857*^9, 3.6863602529532757`*^9}, {3.6863603410720873`*^9, 
   3.686360353222474*^9}},ExpressionUUID->"9fe6a3aa-0860-451f-91ec-\
4db4a36cc625"],

Cell[BoxData[
 TemplateBox[{
  "Solve","svars",
   "\"Equations may not give solutions for all \\\"solve\\\" variables.\"",2,
   176,49,27613417425311650783,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.6863601496976643`*^9, {3.686360194550187*^9, 3.6863602065985813`*^9}, {
   3.686360244199533*^9, 3.686360253280758*^9}, 
   3.686360354445951*^9},ExpressionUUID->"ea64b53c-15b8-469b-8deb-\
9a5dc75dd142"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "2"}], "-", 
    SqrtBox[
     RowBox[{"4", "-", "y", "-", 
      RowBox[{"5", " ", 
       SuperscriptBox["y", "2"]}], "-", 
      RowBox[{"4", " ", 
       SuperscriptBox["y", "3"]}]}]]}], ",", "y"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6863601497142763`*^9, {3.686360194581835*^9, 3.686360206624692*^9}, {
   3.6863602442292633`*^9, 3.686360253309423*^9}, 
   3.686360354477256*^9},ExpressionUUID->"abde9ae7-910b-40e6-9af6-\
3e8f70571be5"]
}, Open  ]],

Cell[TextData[{
 "And when we\[CloseCurlyQuote]re done we simply reset the ",
 Cell[BoxData[
  FormBox["$Assumptions", TextInlineCell]], "InlineInput",ExpressionUUID->
  "216bfd04-0ae4-47ed-a393-36190e61301d"],
 " variable. We can also apply ",
 Cell[BoxData[
  FormBox["$Assumptions", TextInlineCell]], "InlineInput",ExpressionUUID->
  "479ac294-11ad-4262-81bf-c7598a46a6ee"],
 " to a single ",
 Cell[BoxData[
  FormBox["Simplify", TextInlineCell]], "InlineInput",ExpressionUUID->
  "1c0c2371-6a2e-4a43-9e29-84a698ed949b"],
 " expression or similar, but I will leave that to you to look up on."
}], "Text",
 CellChangeTimes->{
  3.685311620629414*^9, {3.686360857716529*^9, 
   3.686360921838766*^9}},ExpressionUUID->"05c52e61-47a1-4e95-8f06-\
d6101b2de08e"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 755},
WindowMargins->{{251, Automatic}, {12, Automatic}},
FrontEndVersion->"11.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (September \
10, 2017)",
StyleDefinitions->FrontEnd`FileName[{"BTools"}, "MarkdownNotebook.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1770, 33, 259, "Metadata",ExpressionUUID->"193e9afe-58b0-4309-9e29-8bb496c1c725"],
Cell[CellGroupData[{
Cell[2353, 57, 213, 4, 52, "Subsection",ExpressionUUID->"a1bec3fe-0332-4956-b0fb-2975ccd560a8"],
Cell[2569, 63, 364, 8, 58, "Text",ExpressionUUID->"4b1d3c23-3612-4d45-9c46-4d17a0cf9493"],
Cell[2936, 73, 331, 8, 35, "Text",ExpressionUUID->"2597c862-01c4-42dc-b39a-1078248423d2"],
Cell[3270, 83, 668, 18, 72, "Code",ExpressionUUID->"1885f133-1a8b-450d-ab7d-531fa6b01e16"],
Cell[CellGroupData[{
Cell[3963, 105, 269, 7, 52, "Code",ExpressionUUID->"3ee95bff-40a5-47ec-9658-2f3765ff20cc"],
Cell[4235, 114, 223, 7, 34, "Output",ExpressionUUID->"8c57d4f8-f618-4b8e-961c-020dd0aead4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4495, 126, 273, 7, 52, "Code",ExpressionUUID->"ecbed9bb-be3c-4808-aae2-08fc40f774e7"],
Cell[4771, 135, 225, 7, 34, "Output",ExpressionUUID->"ee46b3bd-5f62-4302-95f6-ac8ad43b8aef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5033, 147, 252, 6, 52, "Code",ExpressionUUID->"3742a04b-4bd2-41f1-bfe6-da1f4aff96fc"],
Cell[5288, 155, 222, 6, 34, "Output",ExpressionUUID->"22468b83-632f-4d59-9fe0-fb692f44cfcd"]
}, Open  ]],
Cell[5525, 164, 576, 13, 58, "Text",ExpressionUUID->"0a1cc0b0-56ac-404b-a5ad-32a52e65e66c"],
Cell[CellGroupData[{
Cell[6126, 181, 435, 13, 52, "Code",ExpressionUUID->"c51ffad9-2173-4f70-a439-d0bf051dbaef"],
Cell[6564, 196, 934, 31, 34, "Output",ExpressionUUID->"7fc42fc4-22db-4e5f-9ccb-72c14ea72f0d"]
}, Open  ]],
Cell[7513, 230, 344, 8, 58, "Text",ExpressionUUID->"84fe5280-7b6a-4455-b485-69af083d8b4a"],
Cell[CellGroupData[{
Cell[7882, 242, 88, 0, 51, "Subsubsection",ExpressionUUID->"42f8a30d-3914-4d34-83fb-9e374e14a3fd"],
Cell[7973, 244, 260, 7, 35, "Text",ExpressionUUID->"36087a34-6f48-48a0-a91a-df924496b742"],
Cell[CellGroupData[{
Cell[8258, 255, 583, 14, 91, "Code",ExpressionUUID->"60ac1dec-af0d-42fc-9da6-1abc815d8a7e"],
Cell[8844, 271, 1381, 41, 107, "Output",ExpressionUUID->"b93965c3-1cfb-4f7d-bf2a-6f4f9171041e"]
}, Open  ]],
Cell[10240, 315, 244, 6, 35, "Text",ExpressionUUID->"13ff32a5-508d-4dfa-8314-a50d85b07e62"],
Cell[CellGroupData[{
Cell[10509, 325, 233, 5, 52, "Code",ExpressionUUID->"3289257b-881c-430a-bd53-208abf1282c0"],
Cell[10745, 332, 992, 29, 58, "Output",ExpressionUUID->"657a36d2-924d-43de-b6df-a84067c23a40"]
}, Open  ]],
Cell[11752, 364, 396, 10, 35, "Text",ExpressionUUID->"0855859a-c843-400f-9d6c-bce417123550"],
Cell[CellGroupData[{
Cell[12173, 378, 232, 5, 52, "Code",ExpressionUUID->"739aa42f-1d78-434d-a91c-2f7b4c05c473"],
Cell[12408, 385, 872, 26, 58, "Output",ExpressionUUID->"50c5c1a7-e580-45a3-8789-10d591172f28"]
}, Open  ]],
Cell[13295, 414, 1138, 27, 81, "Text",ExpressionUUID->"8a3147a3-f0c2-4f4c-9da2-d6a2460aa10c"],
Cell[14436, 443, 353, 8, 35, "Text",ExpressionUUID->"fc39ea4d-f777-4f97-b300-95da058da38b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14826, 456, 85, 0, 51, "Subsubsection",ExpressionUUID->"0552c4aa-b454-47af-97bb-9e0610336e67"],
Cell[14914, 458, 382, 8, 35, "Text",ExpressionUUID->"08352046-2a64-4b29-b4b0-abc3a28e7a99"],
Cell[CellGroupData[{
Cell[15321, 470, 334, 8, 52, "Code",ExpressionUUID->"acb9707d-3d87-4166-a2fa-810b0ec609cd"],
Cell[15658, 480, 385, 11, 34, "Output",ExpressionUUID->"f6b002ac-4b1b-40d6-88cc-f2d5280c0b49"]
}, Open  ]],
Cell[16058, 494, 367, 8, 35, "Text",ExpressionUUID->"4dafe9cc-1807-406c-a0e9-4e8926f6aaaf"],
Cell[16428, 504, 323, 8, 52, "Code",ExpressionUUID->"11e75e5e-34c8-4dee-a889-5eb5ac340610"],
Cell[16754, 514, 2587, 87, 88, InheritFromParent,ExpressionUUID->"92ed04ef-0b47-4306-ac4e-31deec6c9bc3"],
Cell[19344, 603, 796, 17, 81, "Text",ExpressionUUID->"e2f084dc-2818-4800-bd88-aead9ac16d52"],
Cell[20143, 622, 388, 8, 35, "Text",ExpressionUUID->"98356337-19e7-428d-9acc-6339a9832adb"],
Cell[20534, 632, 291, 8, 52, "Code",ExpressionUUID->"f57571bf-6e93-4329-86e1-547a642ef1d4"],
Cell[20828, 642, 612, 19, 55, InheritFromParent,ExpressionUUID->"b1fb24ff-2332-43e0-a873-fa8dd839d873"],
Cell[21443, 663, 517, 12, 58, "Text",ExpressionUUID->"8ccfdabd-cb78-41c8-a4c8-0a0865ef2c27"],
Cell[21963, 677, 380, 9, 52, "Code",ExpressionUUID->"ca0fb19f-aaa3-4e06-b4cc-83f57cebee3b"],
Cell[22346, 688, 359, 10, 52, InheritFromParent,ExpressionUUID->"6a35bd2f-3abf-4c4a-81b9-4b15061c17ba"],
Cell[22708, 700, 200, 4, 35, "Text",ExpressionUUID->"25556b92-29ed-4249-aa98-c0a24722acd0"],
Cell[22911, 706, 398, 11, 52, "Code",ExpressionUUID->"02b19238-ac76-4405-ae5e-a7705017a5d0"],
Cell[23312, 719, 365, 10, 52, InheritFromParent,ExpressionUUID->"5ab72144-d9d1-44a8-b767-75626a4d0e0b"],
Cell[23680, 731, 658, 14, 81, "Text",ExpressionUUID->"0b860726-176b-4233-99c1-745a5194806d"],
Cell[CellGroupData[{
Cell[24363, 749, 377, 11, 52, "Code",ExpressionUUID->"172110b9-e95f-4b52-819a-415194c29f80"],
Cell[24743, 762, 217, 6, 34, "Output",ExpressionUUID->"6d479ad8-41fe-40db-8785-3ba82d17b709"]
}, Open  ]],
Cell[24975, 771, 1116, 28, 81, "Text",ExpressionUUID->"20dc9280-e7a4-40ad-aba4-dc1b99247ee4"],
Cell[26094, 801, 240, 5, 35, "Text",ExpressionUUID->"fd6116d3-8c83-48bd-8d5a-e2e6afcde0f3"],
Cell[CellGroupData[{
Cell[26359, 810, 871, 25, 129, "Code",ExpressionUUID->"03abea28-b063-43fb-8b11-08cc9901de64"],
Cell[27233, 837, 9363, 168, 242, "Output",ExpressionUUID->"8a542bf3-f861-4fcd-ad69-bd99b0dc5bae"]
}, Open  ]],
Cell[36611, 1008, 408, 10, 35, "Text",ExpressionUUID->"2ae896ef-0f2e-4791-81dd-528e7d3affef"],
Cell[37022, 1020, 283, 7, 35, "Text",ExpressionUUID->"ed9984e5-8876-42cf-bed2-a589205c6ec0"],
Cell[37308, 1029, 1788, 49, 167, "Code",ExpressionUUID->"2a1c98b1-7fa5-4cac-97c5-0e01b7f4ce2e"],
Cell[CellGroupData[{
Cell[39121, 1082, 351, 7, 52, "Code",ExpressionUUID->"3bb2506f-fd21-4ba4-b4f0-edc6a56d4cde"],
Cell[39475, 1091, 9913, 185, 260, "Output",ExpressionUUID->"a0c0c9c3-c6fc-42a6-89cf-907f447423fa"]
}, Open  ]],
Cell[49403, 1279, 226, 4, 35, "Text",ExpressionUUID->"de5e7296-bcd8-40c8-88ce-bfdea985c2b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49666, 1288, 98, 0, 51, "Subsubsection",ExpressionUUID->"b1584b63-863a-4428-aa15-7bb3af866339"],
Cell[49767, 1290, 226, 4, 35, "Text",ExpressionUUID->"43754a3a-00f8-41d1-9625-48f5776824d4"],
Cell[CellGroupData[{
Cell[50018, 1298, 426, 11, 52, "Code",ExpressionUUID->"bf340d07-c272-4db6-a60e-1c2dce0de6ec"],
Cell[50447, 1311, 419, 12, 34, "Output",ExpressionUUID->"914b30ff-93f8-4e3f-a241-d8b410b82abf"]
}, Open  ]],
Cell[50881, 1326, 266, 7, 35, "Text",ExpressionUUID->"4afe6403-b5c6-4be6-8992-00adf182236b"],
Cell[CellGroupData[{
Cell[51172, 1337, 351, 9, 52, "Code",ExpressionUUID->"036a1da7-28e2-4fe7-9fd4-10aeed6f0552"],
Cell[51526, 1348, 358, 8, 24, "Message",ExpressionUUID->"3bf15e4a-c03a-45fd-929d-500d9ae5ee33"]
}, Open  ]],
Cell[51899, 1359, 4775, 145, 74, InheritFromParent,ExpressionUUID->"efc2aa4e-a861-431c-ba5b-99590e8ead63"],
Cell[56677, 1506, 786, 19, 58, "Text",ExpressionUUID->"11b98f49-1065-49ca-8bb5-68ec5b98fb7b"],
Cell[CellGroupData[{
Cell[57488, 1529, 605, 16, 72, "Code",ExpressionUUID->"8211d535-02b7-4fc5-b81b-f3655cdbf62d"],
Cell[58096, 1547, 382, 9, 24, "Message",ExpressionUUID->"801e9bdd-bdfc-410e-b3ff-165d2941c7bd"],
Cell[58481, 1558, 626, 17, 46, "Output",ExpressionUUID->"c2328830-5ef9-4ec6-b4df-ae8f03873d30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59144, 1580, 456, 12, 52, "Code",ExpressionUUID->"b5e13745-015f-44f8-a244-b1174ce587a0"],
Cell[59603, 1594, 11041, 195, 259, "Output",ExpressionUUID->"ad7c31a7-c258-4b83-9593-4d1ea35a20bf"]
}, Open  ]],
Cell[70659, 1792, 289, 7, 58, "Text",ExpressionUUID->"38d3f84c-a2cb-40cc-a4ca-acf72422280c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[70985, 1804, 91, 0, 51, "Subsubsection",ExpressionUUID->"31474e89-0b3a-4a8f-a54f-0b3b443c948c"],
Cell[71079, 1806, 584, 12, 58, "Text",ExpressionUUID->"b58810eb-7e00-4fa4-befd-c9fa8d044f71"],
Cell[CellGroupData[{
Cell[71688, 1822, 186, 4, 52, "Code",ExpressionUUID->"f758708f-c04a-40e8-923e-fa651b38e8b9"],
Cell[71877, 1828, 130, 2, 34, "Output",ExpressionUUID->"412f76c3-377e-491b-a6a3-f28b1a1cf990"]
}, Open  ]],
Cell[72022, 1833, 671, 15, 52, "Text",ExpressionUUID->"7d10ddad-fced-46a3-bc9b-ce801fa20534"],
Cell[CellGroupData[{
Cell[72718, 1852, 430, 9, 52, "Code",ExpressionUUID->"17e57d4b-aa31-492b-9e50-36be4f61dfb5"],
Cell[73151, 1863, 283, 6, 34, "Output",ExpressionUUID->"0342670b-53c3-47ee-95f7-2833d390732b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73471, 1874, 794, 19, 52, "Code",ExpressionUUID->"9fe6a3aa-0860-451f-91ec-4db4a36cc625"],
Cell[74268, 1895, 435, 10, 24, "Message",ExpressionUUID->"ea64b53c-15b8-469b-8deb-9a5dc75dd142"],
Cell[74706, 1907, 517, 15, 45, "Output",ExpressionUUID->"abde9ae7-910b-40e6-9af6-3e8f70571be5"]
}, Open  ]],
Cell[75238, 1925, 759, 18, 58, "Text",ExpressionUUID->"05c52e61-47a1-4e95-8f06-d6101b2de08e"]
}, Open  ]]
}, Open  ]]
}
]
*)

